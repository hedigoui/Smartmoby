Index: src/main/java/org/example/services/Organisateur_service.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.services;\r\n\r\nimport org.example.models.Organisateur;\r\nimport org.example.models.Utilisateur;\r\nimport org.example.utils.DataSource;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\npublic class Organisateur_service implements IOrganisateur_service {\r\n    Connection connection = DataSource.getInstance().getConnection();\r\n\r\n    @Override\r\n    public void ajouter(Organisateur organisateur) {\r\n        String req = \"INSERT INTO organisateur (id, num_badge) VALUES (\" + organisateur.getId() + \", '\" + organisateur.getNum_badge() + \"')\";\r\n\r\n        try {\r\n            Statement st = connection.createStatement();\r\n            st.executeUpdate(req);\r\n            System.out.println(\"organisateur ajouté avec succès.\");\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Erreur lors de l'ajout de l'admin : \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void modifier(Organisateur organisateur, Utilisateur utilisateur) {\r\n        try {\r\n            Statement st = connection.createStatement();\r\n\r\n            String req1 = \"UPDATE organisateur SET num_badge='\" + organisateur.getNum_badge() + \"' WHERE id=\" + organisateur.getId();\r\n            st.executeUpdate(req1);\r\n\r\n            String req2 = \"UPDATE utilisateur SET nom='\" + utilisateur.getNom() + \"', prenom='\" + utilisateur.getPrenom() +\r\n                    \"', nom_utilisateur='\" + utilisateur.getNom_utilisateur() + \"', email='\" + utilisateur.getEmail() +\r\n                    \"', mot_de_passe='\" + utilisateur.getMot_de_passe() + \"' WHERE id=\" + utilisateur.getId();\r\n            st.executeUpdate(req2);\r\n\r\n            System.out.println(\"Organisateur et utilisateur modifiés\");\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void supprimer(Organisateur organisateur, Utilisateur utilisateur) {\r\n        try {\r\n            Statement st = connection.createStatement();\r\n\r\n            String req1 = \"DELETE FROM organisateur WHERE id=\"+organisateur.getId();\r\n            st.executeUpdate(req1);\r\n\r\n            String req2 = \"DELETE FROM utilisateur WHERE id=\"+utilisateur.getId();\r\n            st.executeUpdate(req2);\r\n\r\n            System.out.println(\"Organisateur et utilisateur supprime\");\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/services/Organisateur_service.java b/src/main/java/org/example/services/Organisateur_service.java
--- a/src/main/java/org/example/services/Organisateur_service.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/services/Organisateur_service.java	(date 1739838366966)
@@ -1,12 +1,16 @@
 package org.example.services;
 
+import org.example.models.Client;
 import org.example.models.Organisateur;
 import org.example.models.Utilisateur;
 import org.example.utils.DataSource;
 
 import java.sql.Connection;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.List;
 
 public class Organisateur_service implements IOrganisateur_service {
     Connection connection = DataSource.getInstance().getConnection();
@@ -60,5 +64,38 @@
             System.out.println(e.getMessage());
         }
 
+    }
+
+    @Override
+    public List<Organisateur> afficher() {
+        List<Organisateur> organisateurs = new ArrayList<>();
+
+        // Requête pour récupérer les données des admins avec les informations du département
+        String req = "SELECT u.id , u.nom, u.prenom, u.nom_utilisateur, u.email, u.mot_de_passe, u.role, o.num_badge " +
+                "FROM utilisateur u " +
+                "JOIN organisateur o ON u.id = o.id";
+        // JOIN uniquement avec les admins
+
+        try {
+            Statement st = connection.createStatement();
+            ResultSet rs = st.executeQuery(req);
+
+            while (rs.next()) {
+                organisateurs.add(new Organisateur(
+                        rs.getInt("id"),
+                        rs.getString("nom"),
+                        rs.getString("prenom"),
+                        rs.getString("nom_utilisateur"),
+                        rs.getString("email"),
+                        rs.getString("mot_de_passe"),
+                        Utilisateur.Role.valueOf(rs.getString("role").toUpperCase()),
+                        rs.getInt("num_badge")
+                ));
+            }
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+
+        return organisateurs;
     }
 }
Index: src/main/java/org/example/services/IClient_service.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.services;\r\n\r\nimport org.example.models.Client;\r\nimport org.example.models.Utilisateur;\r\n\r\npublic interface IClient_service {\r\n    public void ajouter (Client client);\r\n    public void modifier (Client client, Utilisateur utilisateur);\r\n    public void supprimer (Client client, Utilisateur utilisateur);\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/services/IClient_service.java b/src/main/java/org/example/services/IClient_service.java
--- a/src/main/java/org/example/services/IClient_service.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/services/IClient_service.java	(date 1739832948550)
@@ -3,8 +3,11 @@
 import org.example.models.Client;
 import org.example.models.Utilisateur;
 
+import java.util.List;
+
 public interface IClient_service {
     public void ajouter (Client client);
     public void modifier (Client client, Utilisateur utilisateur);
     public void supprimer (Client client, Utilisateur utilisateur);
+    public List<Client> afficher();
 }
Index: src/main/java/org/example/models/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.models;\r\n\r\npublic class Client extends Utilisateur{\r\n    private int id_client;\r\n    \r\n\r\n    public Client(int id, String nom, String prenom, String nom_utilisateur, String email, String mot_de_passe, Role role, int id_client) {\r\n        super(id, nom, prenom, nom_utilisateur, email, mot_de_passe, role);\r\n        this.id_client = id_client;\r\n    }\r\n\r\n    public Client(String nom, String prenom, String nom_utilisateur, String email, String mot_de_passe, Role role, int id_client) {\r\n        super(nom, prenom, nom_utilisateur, email, mot_de_passe, role);\r\n        this.id_client = id_client;\r\n    }\r\n\r\n\r\n    public int getId_client() {\r\n        return id_client;\r\n    }\r\n\r\n    public void setId_client(int id_client) {\r\n        this.id_client = id_client;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Client{\" +\r\n                \"id_client=\" + id_client +\r\n                '}';\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/models/Client.java b/src/main/java/org/example/models/Client.java
--- a/src/main/java/org/example/models/Client.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/models/Client.java	(date 1739838366971)
@@ -14,6 +14,14 @@
         this.id_client = id_client;
     }
 
+    public Client(String nom, String prenom, String nom_utilisateur, String email, String mot_de_passe, Role role) {
+        super(nom, prenom, nom_utilisateur, email, mot_de_passe, role);
+    }
+
+    public Client(int id, String nom, String prenom, String nom_utilisateur, String email, String mot_de_passe, Role role) {
+        super(id,nom, prenom, nom_utilisateur, email, mot_de_passe, role);
+    }
+
 
     public int getId_client() {
         return id_client;
@@ -26,6 +34,12 @@
     @Override
     public String toString() {
         return "Client{" +
+                ", nom='" + getNom() + '\'' +
+                ", prenom='" + getPrenom() + '\'' +
+                ", nom_utilisateur='" + getNom_utilisateur() + '\'' +
+                ", email='" + getEmail() + '\'' +
+                ", mot_de_passe='" + getMot_de_passe() + '\'' +
+                ", role=" + getRole() + '\'' +
                 "id_client=" + id_client +
                 '}';
     }
Index: src/main/java/org/example/services/Conducteur_service.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.services;\r\n\r\nimport org.example.models.Conducteur;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\nimport org.example.models.Utilisateur;\r\nimport org.example.utils.DataSource;\r\n\r\npublic class Conducteur_service implements IConducteur_service{\r\n    Connection connection = DataSource.getInstance().getConnection();\r\n\r\n    @Override\r\n    public void ajouter(Conducteur conducteur) {\r\n        String req = \"INSERT INTO conducteur (id, numero_permis) VALUES (\" + conducteur.getId_conducteur() + \", '\" + conducteur.getNumero_permis() + \"')\";\r\n\r\n        try {\r\n            Statement st = connection.createStatement();\r\n            st.executeUpdate(req);\r\n            System.out.println(\"Conducteur ajouté avec succès.\");\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Erreur lors de l'ajout de le conducteur : \" + e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void modifier(Conducteur conducteur , Utilisateur utilisateur) {\r\n        try {\r\n            Statement st = connection.createStatement();\r\n\r\n            String req1 = \"UPDATE conducteur SET numero_permis='\" + conducteur.getNumero_permis() + \"' WHERE id=\" + conducteur.getId();\r\n            st.executeUpdate(req1);\r\n\r\n            String req2 = \"UPDATE utilisateur SET nom='\" + utilisateur.getNom() + \"', prenom='\" + utilisateur.getPrenom() +\r\n                    \"', nom_utilisateur='\" + utilisateur.getNom_utilisateur() + \"', email='\" + utilisateur.getEmail() +\r\n                    \"', mot_de_passe='\" + utilisateur.getMot_de_passe() + \"' WHERE id=\" + utilisateur.getId();\r\n            st.executeUpdate(req2);\r\n\r\n            System.out.println(\"Conducteur et utilisateur modifiés\");\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void supprimer(Conducteur conducteur,Utilisateur utilisateur) {\r\n        try {\r\n            Statement st = connection.createStatement();\r\n\r\n            String req1 = \"DELETE FROM conducteur WHERE id=\"+conducteur.getId();\r\n            st.executeUpdate(req1);\r\n\r\n            String req2 = \"DELETE FROM utilisateur WHERE id=\"+utilisateur.getId();\r\n            st.executeUpdate(req2);\r\n\r\n            System.out.println(\"Conducteur et utilisateur supprime\");\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/services/Conducteur_service.java b/src/main/java/org/example/services/Conducteur_service.java
--- a/src/main/java/org/example/services/Conducteur_service.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/services/Conducteur_service.java	(date 1739838366979)
@@ -3,9 +3,13 @@
 import org.example.models.Conducteur;
 
 import java.sql.Connection;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.List;
 
+import org.example.models.Organisateur;
 import org.example.models.Utilisateur;
 import org.example.utils.DataSource;
 
@@ -62,5 +66,38 @@
             System.out.println(e.getMessage());
         }
 
+    }
+
+    @Override
+    public List<Conducteur> afficher() {
+        List<Conducteur> conducteurs = new ArrayList<>();
+
+        // Requête pour récupérer les données des admins avec les informations du département
+        String req = "SELECT u.id, u.nom, u.prenom, u.nom_utilisateur, u.email, u.mot_de_passe, u.role, c.numero_permis " +
+                "FROM utilisateur u " +
+                "JOIN conducteur c ON u.id = c.id";
+        // JOIN uniquement avec les admins
+
+        try {
+            Statement st = connection.createStatement();
+            ResultSet rs = st.executeQuery(req);
+
+            while (rs.next()) {
+                conducteurs.add(new Conducteur(
+                        rs.getInt("id"),
+                        rs.getString("nom"),
+                        rs.getString("prenom"),
+                        rs.getString("nom_utilisateur"),
+                        rs.getString("email"),
+                        rs.getString("mot_de_passe"),
+                        Utilisateur.Role.valueOf(rs.getString("role").toUpperCase()),
+                        rs.getInt("numero_permis")
+                ));
+            }
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+
+        return conducteurs;
     }
 }
Index: src/main/java/org/example/controllers/AcceuilAdmin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controllers;\r\n\r\npublic class AcceuilAdmin {\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/controllers/AcceuilAdmin.java b/src/main/java/org/example/controllers/AcceuilAdmin.java
--- a/src/main/java/org/example/controllers/AcceuilAdmin.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/controllers/AcceuilAdmin.java	(date 1739845408534)
@@ -1,4 +1,567 @@
 package org.example.controllers;
 
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.scene.control.Alert;
+import javafx.scene.control.TableColumn;
+import javafx.scene.control.TableView;
+import javafx.scene.control.TextField;
+import javafx.scene.control.cell.PropertyValueFactory;
+import javafx.scene.layout.AnchorPane;
+import org.example.models.*;
+import org.example.services.Admin_service;
+import org.example.services.Client_service;
+import org.example.services.Conducteur_service;
+import org.example.services.Organisateur_service;
+
+import java.util.List;
+
 public class AcceuilAdmin {
-}
+
+    @FXML
+    private TableColumn<Admin, String> departement_admin;
+
+    @FXML
+    private TableColumn<Admin, String> email_admin;
+
+    @FXML
+    private TableColumn<Admin, String> mot_de_passe_admin;
+
+    @FXML
+    private TableColumn<Admin, String> nom_admin;
+
+    @FXML
+    private TableColumn<Admin, String> nom_utilisateur_admin;
+
+    @FXML
+    private AnchorPane page_utilisateurs;
+
+    @FXML
+    private TableColumn<Admin, String> prenom_admin;
+
+    @FXML
+    private TableColumn<Admin, Utilisateur.Role> role_admin;
+
+    @FXML
+    private TableView<Admin> tableView;
+
+    @FXML
+    private AnchorPane TableAdmins;
+
+    @FXML
+    private AnchorPane PageClients;
+
+
+
+    @FXML
+    private TableColumn<Client, String> email_client;
+
+
+
+    @FXML
+    private TableColumn<Client, String> mot_de_passe_client;
+
+
+    @FXML
+    private TableColumn<Client, String> nom_client;
+
+    @FXML
+    private TableColumn<Client, String> nom_utilisateur_client;
+
+    @FXML
+    private TableColumn<Client, String> prenom_client;
+
+    @FXML
+    private TableColumn<Client, String> role_client;
+
+    @FXML
+    private TableView<Client> table_client;
+
+    @FXML
+    private AnchorPane Afficher_organisateurs;
+
+
+    @FXML
+    private TableColumn<Organisateur, String> departement_organisateur;
+
+
+    @FXML
+    private TableColumn<Organisateur, String> email_organisateur;
+
+
+    @FXML
+    private TableColumn<Organisateur, String> mot_de_passe_organisateur;
+
+
+    @FXML
+    private TableColumn<Organisateur, String> nom_organisateur;
+
+    @FXML
+    private TableColumn<Organisateur, String> nom_utilisateur_organisateur;
+
+    @FXML
+    private TableColumn<Organisateur, Integer> num_badge;
+
+
+    @FXML
+    private TableColumn<Organisateur, String> prenom_organisateur;
+
+
+    @FXML
+    private TableColumn<Organisateur, Utilisateur.Role> role_organisateur;
+
+    @FXML
+    private AnchorPane afficher_conducteurs;
+
+
+    @FXML
+    private TableColumn<Conducteur, String> email_conducteur;
+
+    @FXML
+    private TableColumn<Conducteur, String> mot_de_passe_conducteur;
+
+    @FXML
+    private TableColumn<Conducteur, String> nom_conducteur;
+
+    @FXML
+    private TableColumn<Conducteur, String> nom_utilisateur_conducteur;
+
+    @FXML
+    private TableColumn<Conducteur, Integer> num_permis;
+
+
+    @FXML
+    private TableColumn<Conducteur, String> prenom_conducteur;
+
+
+    @FXML
+    private TableColumn<Conducteur, Utilisateur.Role> role_conducteur;
+
+
+    @FXML
+    private TableView<Conducteur> table_conducteurs;
+
+    @FXML
+    private TableView<Organisateur> table_organisateurs;
+
+
+    @FXML
+    private AnchorPane Modifier;
+
+
+    @FXML
+    private TextField email;
+
+
+    @FXML
+    private TextField mdp;
+
+
+    @FXML
+    private TextField nom;
+
+
+    @FXML
+    private TextField nom_utilisateur;
+
+
+    @FXML
+    private TextField prenom;
+    private Admin admin;
+
+    @FXML
+    private TextField departement;
+
+
+
+    @FXML
+    void initialize() {
+
+        Admin_service a = new Admin_service();
+        List<Admin> admins = a.afficher(); // Utiliser la méthode correcte pour récupérer les admins
+
+        // Créer un ObservableList à partir des admins
+        ObservableList<Admin> adminsList = FXCollections.observableArrayList(admins); // Liste Observable contenant les admins
+
+        // Lier la TableView avec l'ObservableList
+        tableView.setItems(adminsList); // tableView doit être la TableView dans ton fichier FXML
+
+        // Configurer les colonnes de la TableView
+        nom_admin.setCellValueFactory(new PropertyValueFactory<>("nom"));
+        prenom_admin.setCellValueFactory(new PropertyValueFactory<>("prenom"));
+        nom_utilisateur_admin.setCellValueFactory(new PropertyValueFactory<>("nom_utilisateur"));
+        email_admin.setCellValueFactory(new PropertyValueFactory<>("email"));
+        mot_de_passe_admin.setCellValueFactory(new PropertyValueFactory<>("mot_de_passe"));
+        role_admin.setCellValueFactory(new PropertyValueFactory<>("role"));
+        departement_admin.setCellValueFactory(new PropertyValueFactory<>("departement"));
+
+        //client
+        Client_service c = new Client_service();
+        List<Client> clients = c.afficher();
+
+        ObservableList<Client> clientsList = FXCollections.observableArrayList(clients); // Liste Observable contenant les admins
+
+        // Lier la TableView avec l'ObservableList
+        table_client.setItems(clientsList); // tableView doit être la TableView dans ton fichier FXML
+
+        // Configurer les colonnes de la TableView
+        nom_client.setCellValueFactory(new PropertyValueFactory<>("nom"));
+        prenom_client.setCellValueFactory(new PropertyValueFactory<>("prenom"));
+        nom_utilisateur_client.setCellValueFactory(new PropertyValueFactory<>("nom_utilisateur"));
+        email_client.setCellValueFactory(new PropertyValueFactory<>("email"));
+        mot_de_passe_client.setCellValueFactory(new PropertyValueFactory<>("mot_de_passe"));
+        role_client.setCellValueFactory(new PropertyValueFactory<>("role"));
+
+        //organisateur
+        Organisateur_service o = new Organisateur_service();
+        List<Organisateur> organisateurs = o.afficher();
+
+        ObservableList<Organisateur> organisateursList = FXCollections.observableArrayList(organisateurs); // Liste Observable contenant les admins
+
+        // Lier la TableView avec l'ObservableList
+        table_organisateurs.setItems(organisateursList); // tableView doit être la TableView dans ton fichier FXML
+
+        // Configurer les colonnes de la TableView
+        nom_organisateur.setCellValueFactory(new PropertyValueFactory<>("nom"));
+        prenom_organisateur.setCellValueFactory(new PropertyValueFactory<>("prenom"));
+        nom_utilisateur_organisateur.setCellValueFactory(new PropertyValueFactory<>("nom_utilisateur"));
+        email_organisateur.setCellValueFactory(new PropertyValueFactory<>("email"));
+        mot_de_passe_organisateur.setCellValueFactory(new PropertyValueFactory<>("mot_de_passe"));
+        role_organisateur.setCellValueFactory(new PropertyValueFactory<>("role"));
+        num_badge.setCellValueFactory(new PropertyValueFactory<>("num_badge"));
+
+        //conducteur
+
+        Conducteur_service cd = new Conducteur_service();
+        List<Conducteur> conducteurs = cd.afficher();
+
+        ObservableList<Conducteur> conducteursList = FXCollections.observableArrayList(conducteurs); // Liste Observable contenant les admins
+
+        // Lier la TableView avec l'ObservableList
+        table_conducteurs.setItems(conducteursList); // tableView doit être la TableView dans ton fichier FXML
+
+        // Configurer les colonnes de la TableView
+        nom_conducteur.setCellValueFactory(new PropertyValueFactory<>("nom"));
+        prenom_conducteur.setCellValueFactory(new PropertyValueFactory<>("prenom"));
+        nom_utilisateur_conducteur.setCellValueFactory(new PropertyValueFactory<>("nom_utilisateur"));
+        email_conducteur.setCellValueFactory(new PropertyValueFactory<>("email"));
+        mot_de_passe_conducteur.setCellValueFactory(new PropertyValueFactory<>("mot_de_passe"));
+        role_conducteur.setCellValueFactory(new PropertyValueFactory<>("role"));
+        num_permis.setCellValueFactory(new PropertyValueFactory<>("numero_permis"));
+
+
+
+
+    }
+
+
+
+    @FXML
+    void quiiter(ActionEvent event) {
+
+    }
+
+    @FXML
+    void show_acceuil(ActionEvent event) {
+        page_utilisateurs.setVisible(false);
+
+    }
+
+    @FXML
+    void show_blog(ActionEvent event) {
+
+    }
+
+    @FXML
+    void show_event(ActionEvent event) {
+
+    }
+
+    @FXML
+    void show_parametres(ActionEvent event) {
+        page_utilisateurs.setVisible(false);
+        Modifier.setVisible(true);
+
+    }
+
+    @FXML
+    void show_se_deconnecter(ActionEvent event) {
+
+    }
+
+    @FXML
+    void show_service(ActionEvent event) {
+
+    }
+
+    @FXML
+    void show_transport(ActionEvent event) {
+
+    }
+
+    @FXML
+    void show_utilisateurs(ActionEvent event) {
+        page_utilisateurs.setVisible(true);
+        Modifier.setVisible(false);
+    }
+
+    @FXML
+    void afficher_admins(ActionEvent event) {
+        TableAdmins.setVisible(true);
+        PageClients.setVisible(false);
+        Afficher_organisateurs.setVisible(false);
+        afficher_conducteurs.setVisible(false);
+
+    }
+
+    @FXML
+    void afficher_clients(ActionEvent event) {
+        TableAdmins.setVisible(false);
+        PageClients.setVisible(true);
+        Afficher_organisateurs.setVisible(false);
+        afficher_conducteurs.setVisible(false);
+
+    }
+
+    @FXML
+    void afficher_conducteurs(ActionEvent event) {
+        TableAdmins.setVisible(false);
+        PageClients.setVisible(false);
+        Afficher_organisateurs.setVisible(false);
+        afficher_conducteurs.setVisible(true);
+
+    }
+
+    @FXML
+    void afficher_organisateurs(ActionEvent event) {
+        TableAdmins.setVisible(false);
+        Afficher_organisateurs.setVisible(true);
+        PageClients.setVisible(false);
+        afficher_conducteurs.setVisible(false);
+
+    }
+
+    @FXML
+    void supprimer(ActionEvent event) {
+        Admin_service a = new Admin_service();
+        Client_service c = new Client_service();
+        Conducteur_service cd = new Conducteur_service();
+        Organisateur_service o = new Organisateur_service();
+
+        Admin selectedAdmin = tableView.getSelectionModel().getSelectedItem();
+        Client selectedClient = table_client.getSelectionModel().getSelectedItem();
+        Conducteur selectedConducteur = table_conducteurs.getSelectionModel().getSelectedItem();
+        Organisateur selectedOrg = table_organisateurs.getSelectionModel().getSelectedItem();
+
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+
+        if (selectedAdmin != null) {
+            System.out.println("Admin sélectionné - ID: " + selectedAdmin.getId());
+            System.out.println("Nom: " + selectedAdmin.getNom());
+            System.out.println("Prénom: " + selectedAdmin.getPrenom());
+        } else {
+            System.out.println("Aucun admin sélectionné.");
+        }
+
+        if (selectedAdmin != null) {
+            // Récupérer l'ID de l'admin sélectionné
+            int id = selectedAdmin.getId();
+            System.out.println(id);
+
+            // Créer un objet Utilisateur pour la suppression
+            Utilisateur utilisateur = new Utilisateur(
+                    selectedAdmin.getId(),
+                    selectedAdmin.getNom(),
+                    selectedAdmin.getPrenom(),
+                    selectedAdmin.getNom_utilisateur(),
+                    selectedAdmin.getEmail(),
+                    selectedAdmin.getMot_de_passe(),
+                    selectedAdmin.getRole()
+            );
+
+            // Supprimer l'admin et l'utilisateur
+            Admin_service adminService = new Admin_service();
+            adminService.supprimer(selectedAdmin, utilisateur);
+
+            // Mettre à jour la TableView
+            tableView.getItems().remove(selectedAdmin);
+
+            alert.setContentText("Admin et utilisateur supprimés avec succès.");
+            alert.show();
+
+
+        } else if (selectedClient != null) {
+            System.out.println("Client sélectionné: " + selectedClient.getId()); // Debug
+            Utilisateur utilisateurClient = new Utilisateur(
+                    selectedClient.getId(),
+                    selectedClient.getNom(),
+                    selectedClient.getPrenom(),
+                    selectedClient.getNom_utilisateur(),
+                    selectedClient.getEmail(),
+                    selectedClient.getMot_de_passe(),
+                    selectedClient.getRole()
+            );
+            c.supprimer(selectedClient, utilisateurClient);
+            table_client.getItems().remove(selectedClient);
+            alert.setContentText("Client supprimé avec succès.");
+            alert.show();
+        } else if (selectedConducteur != null) {
+            System.out.println("Conducteur sélectionné: " + selectedConducteur.getId()); // Debug
+            Utilisateur utilisateurConducteur = new Utilisateur(
+                    selectedConducteur.getId(),
+                    selectedConducteur.getNom(),
+                    selectedConducteur.getPrenom(),
+                    selectedConducteur.getNom_utilisateur(),
+                    selectedConducteur.getEmail(),
+                    selectedConducteur.getMot_de_passe(),
+                    selectedConducteur.getRole()
+            );
+            cd.supprimer(selectedConducteur, utilisateurConducteur);
+            table_conducteurs.getItems().remove(selectedConducteur);
+            alert.setContentText("Conducteur supprimé avec succès.");
+            alert.show();
+        } else if (selectedOrg != null) {
+            System.out.println("Organisateur sélectionné: " + selectedOrg.getId()); // Debug
+            Utilisateur utilisateurOrg = new Utilisateur(
+                    selectedOrg.getId(),
+                    selectedOrg.getNom(),
+                    selectedOrg.getPrenom(),
+                    selectedOrg.getNom_utilisateur(),
+                    selectedOrg.getEmail(),
+                    selectedOrg.getMot_de_passe(),
+                    selectedOrg.getRole()
+            );
+            o.supprimer(selectedOrg, utilisateurOrg);
+            table_organisateurs.getItems().remove(selectedOrg);
+            alert.setContentText("Organisateur supprimé avec succès.");
+            alert.show();
+        } else {
+            alert.setAlertType(Alert.AlertType.WARNING);
+            alert.setContentText("Veuillez sélectionner un utilisateur à supprimer.");
+            alert.show();
+        }
+    }
+
+    @FXML
+    void modifier_compte(ActionEvent event) {
+        String Nom = nom.getText();
+        String Prenom = prenom.getText();
+        String Nom_utilisateur = nom_utilisateur.getText();
+        String Email = email.getText();
+        String Mot_de_passe = mdp.getText();
+        String Departement = departement.getText();
+
+        // Vérification des champs vides
+        if (Nom.isEmpty() || Prenom.isEmpty() || Nom_utilisateur.isEmpty() || Email.isEmpty() || Mot_de_passe.isEmpty() || Departement.isEmpty()) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Erreur de validation");
+            alert.setHeaderText(null);
+            alert.setContentText("Tous les champs doivent être remplis.");
+            alert.showAndWait();
+            return;
+        }
+
+        // Vérification de la première lettre du Nom et Prénom en majuscule et absence de chiffres
+        if (!Nom.matches("[A-Z][a-zA-Z]*")) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Erreur de validation");
+            alert.setHeaderText(null);
+            alert.setContentText("Le nom doit commencer par une majuscule et ne contenir que des lettres.");
+            alert.showAndWait();
+            return;
+        }
+
+        if (!Prenom.matches("[A-Z][a-zA-Z]*")) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Erreur de validation");
+            alert.setHeaderText(null);
+            alert.setContentText("Le prénom doit commencer par une majuscule et ne contenir que des lettres.");
+            alert.showAndWait();
+            return;
+        }
+
+        // Vérification que le Nom Utilisateur contient des chiffres
+        if (!Nom_utilisateur.matches(".*\\d.*")) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Erreur de validation");
+            alert.setHeaderText(null);
+            alert.setContentText("Le nom d'utilisateur doit contenir des chiffres.");
+            alert.showAndWait();
+            return;
+        }
+
+        // Vérification du format de l'email
+        if (!Email.matches("^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$")) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Erreur de validation");
+            alert.setHeaderText(null);
+            alert.setContentText("L'email doit être sous forme d'une adresse mail valide.");
+            alert.showAndWait();
+            return;
+        }
+
+        // Vérification que le mot de passe contient des chiffres
+        if (!Mot_de_passe.matches(".*\\d.*")) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Erreur de validation");
+            alert.setHeaderText(null);
+            alert.setContentText("Le mot de passe doit contenir au moins un chiffre.");
+            alert.showAndWait();
+            return;
+        }
+
+        // Vérification que le département ne contient pas de majuscules
+        if (!Departement.matches("[a-z]*")) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Erreur de validation");
+            alert.setHeaderText(null);
+            alert.setContentText("Le département ne doit pas contenir de majuscules.");
+            alert.showAndWait();
+            return;
+        }
+
+        // Si toutes les vérifications sont passées, effectuer la modification
+        int userId = Session.getUserId();
+        System.out.println("L'ID de l'utilisateur connecté est : " + userId);
+
+        // Appel de la méthode de modification
+        Admin_service adminService = new Admin_service();
+        adminService.modifier(new Admin(userId, Nom, Prenom, Nom_utilisateur, Email, Mot_de_passe, Utilisateur.Role.ADMIN, userId, Departement),
+                new Utilisateur(userId, Nom, Prenom, Nom_utilisateur, Email, Mot_de_passe));
+
+        // Alerte de confirmation
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+        alert.setContentText("Les informations ont été modifiées avec succès.");
+        alert.show();
+
+        List<Admin> admins = adminService.afficher(); // Utiliser la méthode correcte pour récupérer les admins
+
+        // Créer un ObservableList à partir des admins
+        ObservableList<Admin> adminsList = FXCollections.observableArrayList(admins); // Liste Observable contenant les admins
+
+        // Lier la TableView avec l'ObservableList
+        tableView.setItems(adminsList); // tableView doit être la TableView dans ton fichier FXML
+
+        // Configurer les colonnes de la TableView
+        nom_admin.setCellValueFactory(new PropertyValueFactory<>("nom"));
+        prenom_admin.setCellValueFactory(new PropertyValueFactory<>("prenom"));
+        nom_utilisateur_admin.setCellValueFactory(new PropertyValueFactory<>("nom_utilisateur"));
+        email_admin.setCellValueFactory(new PropertyValueFactory<>("email"));
+        mot_de_passe_admin.setCellValueFactory(new PropertyValueFactory<>("mot_de_passe"));
+        role_admin.setCellValueFactory(new PropertyValueFactory<>("role"));
+        departement_admin.setCellValueFactory(new PropertyValueFactory<>("departement"));
+    }
+
+
+
+
+
+
+}
+
+
+
+
+
Index: src/main/java/org/example/controllers/Login.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controllers;\r\n\r\npublic class Login {\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/controllers/Login.java b/src/main/java/org/example/controllers/Login.java
--- a/src/main/java/org/example/controllers/Login.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/controllers/Login.java	(date 1739843661264)
@@ -1,4 +1,128 @@
 package org.example.controllers;
 
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Node;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.scene.control.Alert;
+import javafx.scene.control.PasswordField;
+import javafx.scene.control.TextField;
+import javafx.stage.Stage;
+import org.example.models.Session;
+import org.example.models.Utilisateur;
+import org.example.utils.DataSource;
+
+import java.io.IOException;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
 public class Login {
+
+    @FXML
+    private PasswordField mot_de_passe;
+
+    @FXML
+    private TextField nom_utilisateur;
+
+    @FXML
+    void se_connecter(ActionEvent event) {
+        String username = nom_utilisateur.getText();
+        String password = mot_de_passe.getText();
+
+        // Connexion à la base de données
+        Connection connection = DataSource.getInstance().getConnection();
+        String query = "SELECT * FROM utilisateur WHERE nom_utilisateur = ? AND mot_de_passe = ?";
+
+        try {
+            // Préparer la requête SQL pour vérifier l'utilisateur
+            PreparedStatement pst = connection.prepareStatement(query);
+            pst.setString(1, username);
+            pst.setString(2, password);
+
+            // Exécuter la requête
+            ResultSet rs = pst.executeQuery();
+
+            if (rs.next()) {
+                System.out.println("Connexion réussie !");
+                // Récupérer l'ID de l'utilisateur connecté
+                int userId = rs.getInt("id");
+
+                // Stocker cet ID dans la classe Session
+                Session.setUserId(userId);
+
+                String roleString = rs.getString("role");
+                Utilisateur.Role role = Utilisateur.Role.valueOf(roleString);
+
+                if(role.equals(Utilisateur.Role.ADMIN)) {
+                    try {
+                        // Charger le fichier FXML de la nouvelle scène
+                        FXMLLoader loader = new FXMLLoader(getClass().getResource("/AcceuilAdmin.fxml"));
+                        Parent root = loader.load();
+
+                        // Créer une nouvelle scène avec le fichier FXML chargé
+                        Scene scene = new Scene(root);
+
+                        // Récupérer la scène actuelle
+                        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
+
+                        // Changer de scène
+                        stage.setScene(scene);
+                        stage.show();
+                    } catch (IOException e) {
+                        e.printStackTrace(); // Gérer l'erreur s'il y a un problème avec le chargement du fichier FXML
+                    }
+                }
+            } else {
+                // Si aucun utilisateur n'est trouvé, afficher un message d'erreur
+                Alert alert = new Alert(Alert.AlertType.ERROR);
+                alert.setTitle("Erreur de connexion");
+                alert.setHeaderText(null);
+                alert.setContentText("Nom d'utilisateur ou mot de passe incorrect.");
+                alert.showAndWait();
+            }
+
+        } catch (SQLException e) {
+            System.out.println("Erreur lors de la connexion : " + e.getMessage());
+        }
+    }
+
+
+    @FXML
+    void inscription(ActionEvent event) {
+        try {
+            // Charger le fichier FXML de la nouvelle scène
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/Register.fxml"));
+            Parent root = loader.load();
+
+            // Créer une nouvelle scène avec le fichier FXML chargé
+            Scene scene = new Scene(root);
+
+            // Récupérer la scène actuelle
+            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
+
+            // Changer de scène
+            stage.setScene(scene);
+            stage.show();
+        } catch (IOException e) {
+            e.printStackTrace(); // Gérer l'erreur s'il y a un problème avec le chargement du fichier FXML
+        }
+
+    }
+
+    @FXML
+    void x(ActionEvent event) {
+        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
+
+        // Fermer la fenêtre
+        stage.close();
+
+    }
+
+
+
+
 }
Index: src/main/java/org/example/models/Organisateur.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.models;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\npublic class Organisateur extends Utilisateur{\r\n    private int id_organisateur;\r\n    private int num_badge;\r\n\r\n    public Organisateur(int id, String nom, String prenom, String nom_utilisateur, String email, String mot_de_passe, Role role, int id_organisateur, int num_badge) {\r\n        super(id, nom, prenom, nom_utilisateur, email, mot_de_passe, role);\r\n        this.id_organisateur = id_organisateur;\r\n        this.num_badge = num_badge;\r\n    }\r\n\r\n    public Organisateur(String nom, String prenom, String nom_utilisateur, String email, String mot_de_passe, Role role, int id_organisateur, int num_badge) {\r\n        super(nom, prenom, nom_utilisateur, email, mot_de_passe, role);\r\n        this.id_organisateur = id_organisateur;\r\n        this.num_badge = num_badge;\r\n    }\r\n\r\n    public Organisateur(int id, String nom, String prenom, String nom_utilisateur, String email, String mot_de_passe, Role role, int num_badge) {\r\n        super(id, nom, prenom, nom_utilisateur, email, mot_de_passe, role);\r\n        this.num_badge = num_badge;\r\n    }\r\n\r\n    public Organisateur(String nom, String prenom, String nom_utilisateur, String email, String mot_de_passe, Role role, int num_badge) {\r\n        super(nom, prenom, nom_utilisateur, email, mot_de_passe, role);\r\n        this.num_badge = num_badge;\r\n    }\r\n\r\n    public int getId_organisateur() {\r\n        return id_organisateur;\r\n    }\r\n\r\n    public void setId_organisateur(int id_organisateur) {\r\n        this.id_organisateur = id_organisateur;\r\n    }\r\n\r\n    public int getNum_badge() {\r\n        return num_badge;\r\n    }\r\n\r\n    public void setNum_badge(int num_badge) {\r\n        this.num_badge = num_badge;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Organisateur{\" +\r\n                \"id_organisateur=\" + id_organisateur +\r\n                \", num_badge=\" + num_badge +\r\n                '}';\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/models/Organisateur.java b/src/main/java/org/example/models/Organisateur.java
--- a/src/main/java/org/example/models/Organisateur.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/models/Organisateur.java	(date 1739834351354)
@@ -48,7 +48,12 @@
     @Override
     public String toString() {
         return "Organisateur{" +
-                "id_organisateur=" + id_organisateur +
+                ", nom='" + getNom() + '\'' +
+                ", prenom='" + getPrenom() + '\'' +
+                ", nom_utilisateur='" + getNom_utilisateur() + '\'' +
+                ", email='" + getEmail() + '\'' +
+                ", mot_de_passe='" + getMot_de_passe() + '\'' +
+                ", role=" + getRole() + '\'' +
                 ", num_badge=" + num_badge +
                 '}';
     }
Index: src/main/java/org/example/services/Client_service.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.services;\r\n\r\nimport org.example.models.Client;\r\nimport org.example.models.Utilisateur;\r\nimport org.example.utils.DataSource;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\npublic class Client_service implements IClient_service {\r\n    Connection connection = DataSource.getInstance().getConnection();\r\n\r\n    @Override\r\n    public void ajouter(Client client) {\r\n        String req = \"INSERT INTO client (id) VALUES (\" + client.getId() + \")\";\r\n\r\n        try {\r\n            Statement st = connection.createStatement();\r\n            st.executeUpdate(req);\r\n            System.out.println(\"client ajouté avec succès.\");\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Erreur lors de l'ajout de le client : \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void modifier(Client client, Utilisateur utilisateur) {\r\n        try {\r\n            Statement st = connection.createStatement();\r\n\r\n\r\n            String req2 = \"UPDATE utilisateur SET nom='\" + utilisateur.getNom() + \"', prenom='\" + utilisateur.getPrenom() +\r\n                    \"', nom_utilisateur='\" + utilisateur.getNom_utilisateur() + \"', email='\" + utilisateur.getEmail() +\r\n                    \"', mot_de_passe='\" + utilisateur.getMot_de_passe() + \"' WHERE id=\" + utilisateur.getId();\r\n            st.executeUpdate(req2);\r\n\r\n            System.out.println(\"Client et utilisateur modifiés\");\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void supprimer(Client client, Utilisateur utilisateur) {\r\n        try {\r\n            Statement st = connection.createStatement();\r\n\r\n            String req1 = \"DELETE FROM client WHERE id=\"+client.getId();\r\n            st.executeUpdate(req1);\r\n\r\n            String req2 = \"DELETE FROM utilisateur WHERE id=\"+utilisateur.getId();\r\n            st.executeUpdate(req2);\r\n\r\n            System.out.println(\"Client et utilisateur supprime\");\r\n        } catch (SQLException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/services/Client_service.java b/src/main/java/org/example/services/Client_service.java
--- a/src/main/java/org/example/services/Client_service.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/services/Client_service.java	(date 1739838366950)
@@ -1,12 +1,16 @@
 package org.example.services;
 
+import org.example.models.Admin;
 import org.example.models.Client;
 import org.example.models.Utilisateur;
 import org.example.utils.DataSource;
 
 import java.sql.Connection;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.List;
 
 public class Client_service implements IClient_service {
     Connection connection = DataSource.getInstance().getConnection();
@@ -58,5 +62,36 @@
             System.out.println(e.getMessage());
         }
 
+    }
+
+    @Override
+    public List<Client> afficher() {
+        List<Client> clients = new ArrayList<>();
+
+        // Requête pour récupérer les données des admins avec les informations du département
+        String req = "SELECT u.id , u.nom, u.prenom, u.nom_utilisateur, u.email, u.mot_de_passe, u.role " +
+                "FROM utilisateur u " +
+                "JOIN client c ON u.id = c.id";  // JOIN uniquement avec les admins
+
+        try {
+            Statement st = connection.createStatement();
+            ResultSet rs = st.executeQuery(req);
+
+            while (rs.next()) {
+                clients.add(new Client(
+                        rs.getInt("id"),
+                        rs.getString("nom"),
+                        rs.getString("prenom"),
+                        rs.getString("nom_utilisateur"),
+                        rs.getString("email"),
+                        rs.getString("mot_de_passe"),
+                        Utilisateur.Role.valueOf(rs.getString("role").toUpperCase())
+                ));
+            }
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+        }
+
+        return clients;
     }
 }
Index: src/main/java/org/example/services/IOrganisateur_service.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.services;\r\n\r\nimport org.example.models.Organisateur;\r\nimport org.example.models.Utilisateur;\r\n\r\npublic interface IOrganisateur_service {\r\n    public void ajouter (Organisateur organisateur);\r\n    public void modifier (Organisateur organisateur , Utilisateur utilisateur);\r\n    public void supprimer (Organisateur organisateur, Utilisateur utilisateur);\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/services/IOrganisateur_service.java b/src/main/java/org/example/services/IOrganisateur_service.java
--- a/src/main/java/org/example/services/IOrganisateur_service.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/services/IOrganisateur_service.java	(date 1739834089046)
@@ -3,9 +3,12 @@
 import org.example.models.Organisateur;
 import org.example.models.Utilisateur;
 
+import java.util.List;
+
 public interface IOrganisateur_service {
     public void ajouter (Organisateur organisateur);
     public void modifier (Organisateur organisateur , Utilisateur utilisateur);
     public void supprimer (Organisateur organisateur, Utilisateur utilisateur);
+    public List<Organisateur> afficher();
 
 }
Index: src/main/resources/AcceuilAdmin.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import java.lang.String?>\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.shape.Line?>\r\n<?import javafx.scene.text.Font?>\r\n\r\n<AnchorPane prefHeight=\"609.0\" prefWidth=\"919.0\" xmlns=\"http://javafx.com/javafx/23.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"org.example.controllers.AcceuilUser\">\r\n   <children>\r\n      <AnchorPane layoutX=\"-4.0\" prefHeight=\"610.0\" prefWidth=\"327.0\" styleClass=\"left-form\" stylesheets=\"@AcceuilUser.css\">\r\n         <children>\r\n            <ImageView fitHeight=\"150.0\" fitWidth=\"200.0\" layoutX=\"56.0\" layoutY=\"38.0\" pickOnBounds=\"true\" preserveRatio=\"true\" />\r\n            <ImageView fitHeight=\"104.0\" fitWidth=\"107.0\" layoutX=\"104.0\" layoutY=\"24.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n               <image>\r\n                  <Image url=\"@user.png\" />\r\n               </image>\r\n            </ImageView>\r\n            <Label layoutX=\"108.0\" layoutY=\"128.0\" text=\"Bienvenue\">\r\n               <font>\r\n                  <Font name=\"Tahoma\" size=\"24.0\" />\r\n               </font>\r\n            </Label>\r\n            <Line endX=\"100.0\" layoutX=\"156.0\" layoutY=\"176.0\" startX=\"-100.0\" />\r\n            <Button layoutX=\"46.0\" layoutY=\"212.0\" mnemonicParsing=\"false\" prefHeight=\"26.0\" prefWidth=\"218.0\" text=\"Acceuil\">\r\n               <styleClass>\r\n                  <String fx:value=\"nav-btn\" />\r\n                  <String fx:value=\"nav-btn\" />\r\n               </styleClass>\r\n            </Button>\r\n            <Button layoutX=\"47.0\" layoutY=\"255.0\" mnemonicParsing=\"false\" prefHeight=\"26.0\" prefWidth=\"218.0\" styleClass=\"nav-btn\" text=\"Transports\" />\r\n            <Button layoutX=\"47.0\" layoutY=\"299.0\" mnemonicParsing=\"false\" prefHeight=\"26.0\" prefWidth=\"218.0\" styleClass=\"nav-btn\" text=\"Services\" />\r\n            <Button layoutX=\"47.0\" layoutY=\"343.0\" mnemonicParsing=\"false\" prefHeight=\"26.0\" prefWidth=\"218.0\" styleClass=\"nav-btn\" text=\"Evénements\" />\r\n            <Button layoutX=\"47.0\" layoutY=\"389.0\" mnemonicParsing=\"false\" prefHeight=\"26.0\" prefWidth=\"218.0\" styleClass=\"nav-btn\" text=\"Blog\" />\r\n            <Button layoutX=\"47.0\" layoutY=\"435.0\" mnemonicParsing=\"false\" prefHeight=\"26.0\" prefWidth=\"218.0\" styleClass=\"nav-btn\" text=\"Paramétres\" />\r\n            <Button layoutX=\"47.0\" layoutY=\"483.0\" mnemonicParsing=\"false\" prefHeight=\"26.0\" prefWidth=\"218.0\" styleClass=\"nav-btn\" text=\"Se Déconnecter\" />\r\n            <Button layoutX=\"47.0\" layoutY=\"527.0\" mnemonicParsing=\"false\" prefHeight=\"26.0\" prefWidth=\"218.0\" styleClass=\"nav-btn\" text=\"Quitter\" />\r\n         </children>\r\n      </AnchorPane>\r\n   </children>\r\n</AnchorPane>\r\n
===================================================================
diff --git a/src/main/resources/AcceuilAdmin.fxml b/src/main/resources/AcceuilAdmin.fxml
--- a/src/main/resources/AcceuilAdmin.fxml	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/resources/AcceuilAdmin.fxml	(date 1739841174431)
@@ -3,15 +3,18 @@
 <?import java.lang.String?>
 <?import javafx.scene.control.Button?>
 <?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TableColumn?>
+<?import javafx.scene.control.TableView?>
+<?import javafx.scene.control.TextField?>
 <?import javafx.scene.image.Image?>
 <?import javafx.scene.image.ImageView?>
 <?import javafx.scene.layout.AnchorPane?>
 <?import javafx.scene.shape.Line?>
 <?import javafx.scene.text.Font?>
 
-<AnchorPane prefHeight="609.0" prefWidth="919.0" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.controllers.AcceuilUser">
+<AnchorPane prefHeight="678.0" prefWidth="1293.0" xmlns="http://javafx.com/javafx/23.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.controllers.AcceuilAdmin">
    <children>
-      <AnchorPane layoutX="-4.0" prefHeight="610.0" prefWidth="327.0" styleClass="left-form" stylesheets="@AcceuilUser.css">
+      <AnchorPane layoutX="-4.0" prefHeight="678.0" prefWidth="299.0" styleClass="left-form" stylesheets="@AcceuilUser.css">
          <children>
             <ImageView fitHeight="150.0" fitWidth="200.0" layoutX="56.0" layoutY="38.0" pickOnBounds="true" preserveRatio="true" />
             <ImageView fitHeight="104.0" fitWidth="107.0" layoutX="104.0" layoutY="24.0" pickOnBounds="true" preserveRatio="true">
@@ -25,19 +28,107 @@
                </font>
             </Label>
             <Line endX="100.0" layoutX="156.0" layoutY="176.0" startX="-100.0" />
-            <Button layoutX="46.0" layoutY="212.0" mnemonicParsing="false" prefHeight="26.0" prefWidth="218.0" text="Acceuil">
+            <Button layoutX="46.0" layoutY="212.0" mnemonicParsing="false" onAction="#show_acceuil" prefHeight="26.0" prefWidth="218.0" text="Acceuil">
                <styleClass>
                   <String fx:value="nav-btn" />
                   <String fx:value="nav-btn" />
                </styleClass>
             </Button>
-            <Button layoutX="47.0" layoutY="255.0" mnemonicParsing="false" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Transports" />
-            <Button layoutX="47.0" layoutY="299.0" mnemonicParsing="false" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Services" />
-            <Button layoutX="47.0" layoutY="343.0" mnemonicParsing="false" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Evénements" />
-            <Button layoutX="47.0" layoutY="389.0" mnemonicParsing="false" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Blog" />
-            <Button layoutX="47.0" layoutY="435.0" mnemonicParsing="false" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Paramétres" />
-            <Button layoutX="47.0" layoutY="483.0" mnemonicParsing="false" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Se Déconnecter" />
-            <Button layoutX="47.0" layoutY="527.0" mnemonicParsing="false" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Quitter" />
+            <Button layoutX="47.0" layoutY="255.0" mnemonicParsing="false" onAction="#show_transport" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Transports" />
+            <Button layoutX="47.0" layoutY="299.0" mnemonicParsing="false" onAction="#show_service" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Services" />
+            <Button layoutX="47.0" layoutY="343.0" mnemonicParsing="false" onAction="#show_event" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Evénements" />
+            <Button layoutX="47.0" layoutY="389.0" mnemonicParsing="false" onAction="#show_blog" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Blog" />
+            <Button layoutX="47.0" layoutY="473.0" mnemonicParsing="false" onAction="#show_parametres" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Paramétres" />
+            <Button layoutX="46.0" layoutY="514.0" mnemonicParsing="false" onAction="#show_se_deconnecter" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Se Déconnecter" />
+            <Button layoutX="47.0" layoutY="562.0" mnemonicParsing="false" onAction="#quiiter" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Quitter" />
+            <Button layoutX="47.0" layoutY="434.0" mnemonicParsing="false" onAction="#show_utilisateurs" prefHeight="26.0" prefWidth="218.0" styleClass="nav-btn" text="Utilisateurs" />
+         </children>
+      </AnchorPane>
+      <AnchorPane fx:id="page_utilisateurs" layoutX="296.8" prefHeight="666.0" prefWidth="841.0" visible="false" AnchorPane.bottomAnchor="12.0" AnchorPane.leftAnchor="297.0" AnchorPane.rightAnchor="-1.0" AnchorPane.topAnchor="0.0">
+         <children>
+            <AnchorPane layoutX="-2.0" prefHeight="622.0" prefWidth="208.0">
+               <children>
+                  <Button layoutX="37.0" layoutY="36.0" mnemonicParsing="false" onAction="#afficher_admins" prefHeight="58.0" prefWidth="130.0" text="Afficher Admins" />
+                  <Button layoutX="37.0" layoutY="117.0" mnemonicParsing="false" onAction="#afficher_clients" prefHeight="58.0" prefWidth="130.0" text="Afficher Clients" />
+                  <Button layoutX="37.0" layoutY="204.0" mnemonicParsing="false" onAction="#afficher_organisateurs" prefHeight="58.0" prefWidth="130.0" text="Afficher Organisateurs" />
+                  <Button layoutX="37.0" layoutY="299.0" mnemonicParsing="false" onAction="#afficher_conducteurs" prefHeight="58.0" prefWidth="130.0" text="Afficher Conducteurs" />
+                  <Button layoutX="39.0" layoutY="376.0" mnemonicParsing="false" onAction="#supprimer" prefHeight="58.0" prefWidth="130.0" text="Supprimer" />
+               </children>
+            </AnchorPane>
+            <AnchorPane fx:id="TableAdmins" layoutX="206.0" layoutY="8.0" prefHeight="610.0" prefWidth="633.0" visible="false">
+               <children>
+                  <TableView fx:id="tableView" layoutX="16.0" layoutY="14.0" prefHeight="593.0" prefWidth="618.0" AnchorPane.bottomAnchor="17.0" AnchorPane.leftAnchor="16.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
+                     <columns>
+                        <TableColumn fx:id="nom_admin" prefWidth="72.79995727539062" text="Nom" />
+                        <TableColumn fx:id="prenom_admin" prefWidth="77.5999755859375" text="Prenom" />
+                        <TableColumn fx:id="nom_utilisateur_admin" prefWidth="112.0" text="Nom D'utilisateur" />
+                        <TableColumn fx:id="email_admin" prefWidth="84.0" text="Email" />
+                        <TableColumn fx:id="mot_de_passe_admin" prefWidth="87.199951171875" text="Mot De Passe " />
+                        <TableColumn fx:id="role_admin" prefWidth="84.7999267578125" text="Role" />
+                        <TableColumn fx:id="departement_admin" prefWidth="86.400146484375" text="Département" />
+                     </columns>
+                  </TableView>
+               </children>
+            </AnchorPane>
+            <AnchorPane fx:id="PageClients" layoutX="206.0" layoutY="14.0" prefHeight="634.0" prefWidth="618.0" visible="false">
+               <children>
+                  <TableView fx:id="table_client" layoutX="46.0" layoutY="14.0" prefHeight="551.0" prefWidth="566.0">
+                     <columns>
+                        <TableColumn fx:id="nom_client" prefWidth="72.79995727539062" text="Nom" />
+                        <TableColumn fx:id="prenom_client" prefWidth="77.5999755859375" text="Prenom" />
+                        <TableColumn fx:id="nom_utilisateur_client" prefWidth="112.0" text="Nom D'utilisateur" />
+                        <TableColumn fx:id="email_client" prefWidth="84.0" text="Email" />
+                        <TableColumn fx:id="mot_de_passe_client" prefWidth="87.199951171875" text="Mot De Passe " />
+                        <TableColumn fx:id="role_client" prefWidth="84.7999267578125" text="Role" />
+                     </columns>
+                  </TableView>
+               </children>
+            </AnchorPane>
+            <AnchorPane fx:id="Afficher_organisateurs" layoutX="206.0" layoutY="14.0" prefHeight="634.0" prefWidth="648.0" visible="false">
+               <children>
+                  <TableView fx:id="table_organisateurs" layoutX="8.0" layoutY="2.0" prefHeight="583.0" prefWidth="682.0">
+                     <columns>
+                        <TableColumn fx:id="nom_organisateur" prefWidth="72.79995727539062" text="Nom" />
+                        <TableColumn fx:id="prenom_organisateur" prefWidth="77.5999755859375" text="Prenom" />
+                        <TableColumn fx:id="nom_utilisateur_organisateur" prefWidth="112.0" text="Nom D'utilisateur" />
+                        <TableColumn fx:id="email_organisateur" prefWidth="84.0" text="Email" />
+                        <TableColumn fx:id="mot_de_passe_organisateur" prefWidth="87.199951171875" text="Mot De Passe " />
+                        <TableColumn fx:id="role_organisateur" prefWidth="84.7999267578125" text="Role" />
+                        <TableColumn fx:id="num_badge" prefWidth="75.0" text="Num Badge" />
+                     </columns>
+                  </TableView>
+               </children>
+            </AnchorPane>
+            <AnchorPane fx:id="afficher_conducteurs" layoutX="206.0" layoutY="14.0" prefHeight="634.0" prefWidth="770.0">
+               <children>
+                  <TableView fx:id="table_conducteurs" layoutX="14.0" layoutY="14.0" prefHeight="594.0" prefWidth="715.0">
+                     <columns>
+                        <TableColumn fx:id="nom_conducteur" prefWidth="72.79995727539062" text="Nom" />
+                        <TableColumn fx:id="prenom_conducteur" prefWidth="77.5999755859375" text="Prenom" />
+                        <TableColumn fx:id="nom_utilisateur_conducteur" prefWidth="112.0" text="Nom D'utilisateur" />
+                        <TableColumn fx:id="email_conducteur" prefWidth="84.0" text="Email" />
+                        <TableColumn fx:id="mot_de_passe_conducteur" prefWidth="87.199951171875" text="Mot De Passe " />
+                        <TableColumn fx:id="role_conducteur" prefWidth="84.7999267578125" text="Role" />
+                        <TableColumn fx:id="num_permis" prefWidth="93.5999755859375" text="Numero Permis" />
+                     </columns>
+                  </TableView>
+               </children>
+            </AnchorPane>
+         </children>
+      </AnchorPane>
+      <AnchorPane fx:id="Modifier" layoutX="297.0" layoutY="7.0" prefHeight="666.0" prefWidth="950.0">
+         <children>
+            <TextField fx:id="nom" layoutX="25.0" layoutY="45.0" prefHeight="43.0" prefWidth="502.0" promptText="Nom" styleClass="text-field" stylesheets="@AcceuilUser.css" />
+            <TextField fx:id="prenom" layoutX="25.0" layoutY="106.0" prefHeight="43.0" prefWidth="502.0" promptText="Prénom" styleClass="text-field" stylesheets="@AcceuilUser.css" />
+            <TextField fx:id="email" layoutX="25.0" layoutY="230.0" prefHeight="43.0" prefWidth="502.0" promptText="Email" styleClass="text-field" stylesheets="@AcceuilUser.css" />
+            <TextField fx:id="mdp" layoutX="25.0" layoutY="289.0" prefHeight="43.0" prefWidth="502.0" promptText="Mot De Passe" styleClass="text-field" stylesheets="@AcceuilUser.css" />
+            <TextField fx:id="nom_utilisateur" layoutX="25.0" layoutY="169.0" prefHeight="43.0" prefWidth="502.0" promptText="Nom D'utilisateur" styleClass="text-field" stylesheets="@AcceuilUser.css" />
+            <Button layoutX="178.0" layoutY="455.0" mnemonicParsing="false" onAction="#modifier_compte" prefHeight="26.0" prefWidth="196.0" styleClass="login-btn" stylesheets="@AcceuilUser.css" text="Modifier Votre Compte">
+               <font>
+                  <Font name="Tahoma" size="14.0" />
+               </font>
+            </Button>
+            <TextField fx:id="departement" layoutX="25.0" layoutY="352.0" prefHeight="43.0" prefWidth="502.0" promptText="Département" styleClass="text-field" stylesheets="@AcceuilUser.css" />
          </children>
       </AnchorPane>
    </children>
Index: src/main/java/org/example/services/IConducteur_service.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.services;\r\n\r\nimport org.example.models.Conducteur;\r\nimport org.example.models.Utilisateur;\r\n\r\npublic interface IConducteur_service {\r\n    void ajouter(Conducteur conducteur);\r\n\r\n    void modifier(Conducteur conducteur , Utilisateur utilisateur);\r\n\r\n    void supprimer(Conducteur conducteur , Utilisateur utilisateur);\r\n}\r\n
===================================================================
diff --git a/src/main/java/org/example/services/IConducteur_service.java b/src/main/java/org/example/services/IConducteur_service.java
--- a/src/main/java/org/example/services/IConducteur_service.java	(revision 5d8dcd09d861c581eab370e90184d182f054638b)
+++ b/src/main/java/org/example/services/IConducteur_service.java	(date 1739835786982)
@@ -3,10 +3,13 @@
 import org.example.models.Conducteur;
 import org.example.models.Utilisateur;
 
+import java.util.List;
+
 public interface IConducteur_service {
     void ajouter(Conducteur conducteur);
 
     void modifier(Conducteur conducteur , Utilisateur utilisateur);
 
     void supprimer(Conducteur conducteur , Utilisateur utilisateur);
+    public List<Conducteur> afficher();
 }
